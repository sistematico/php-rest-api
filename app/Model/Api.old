<?php

namespace App\Model;

use App\Core\Model;

class Api extends Model
{
    public $porPagina = 5;

    public function listar($pagina): array
    {
        $offset = ($pagina-1) * $this->porPagina;
        $total = $this->quantidade();
        $paginacao = Paginacao::pag($pagina, $this->porPagina, $total);

        $query = $this->db->prepare("SELECT id, usuario, email FROM usuarios LIMIT " . $offset . ", " . $this->porPagina);
        $query->execute();

        $resultado = [];
        while ($linha = $query->fetch()) {
            $resultado[] = $linha;
        }

        return ['data' => $resultado, 'paginacao' => $paginacao];
    }

    public function perfil($id)
    {
        $consulta = $this->db->prepare('SELECT id, email, usuario, senha FROM usuarios WHERE id LIKE :id LIMIT 1;');
        $consulta->execute([':id' => $id]);
        return $consulta->fetch();
    }

    public function cadastro($email, $usuario, $senha)
    {
        $consulta = $this->db->prepare('SELECT id, email, usuario, senha FROM usuarios WHERE usuario LIKE :usuario OR email LIKE :email LIMIT 1;');
        $consulta->execute([':usuario' => $usuario, ':email' => $email]);

        if ($consulta->fetch())
            return [
                'status' => 'erro', 
                'classe' => 'danger',
                'titulo' => 'Erro',
                'mensagem' => 'Usuario já existe.'
            ];        

        $hash = password_hash($senha, PASSWORD_DEFAULT);
        $query = $this->db->prepare("INSERT INTO usuarios (email, usuario, senha) VALUES (:email, :usuario, :senha);");
        $query->execute([':email' => $email, ':usuario' => $usuario, ':senha' => $hash]);

        return [
            'status' => 'sucesso', 
            'classe' => 'success',
            'titulo' => 'Sucesso',
            'mensagem' => 'Usuário cadastrado com sucesso.'
        ]; 
    }

    public function entrar($usuario, $senha)
    {
        $consulta = $this->db->prepare('SELECT id, email, usuario, senha FROM usuarios WHERE usuario LIKE :usuario LIMIT 1;');
        $consulta->execute([':usuario' => $usuario]);

        if (!$consultaUsuario = $consulta->fetch())
            return [
                'status' => 'erro', 
                'classe' => 'warning',
                'titulo' => 'Erro',
                'mensagem' => 'Usuario e/ou senha não correspondem.'
            ];
        
        if (!password_verify($senha, $consultaUsuario['senha']))
            return [
                'status' => 'erro', 
                'classe' => 'danger',
                'titulo' => 'Erro',
                'mensagem' => 'Usuario e/ou senha não correspondem.'
            ];

        $_SESSION['id'] = $consultaUsuario['id'];
        $_SESSION['usuario'] = $consultaUsuario['usuario'];
        $_SESSION['email'] = $consultaUsuario['email'];
        $_SESSION['logado'] = 'sim';

        return [
            'status' => 'sucesso', 
            'classe' => 'success',
            'titulo' => 'Sucesso',
            'mensagem' => 'Logado com sucesso.'
        ];
    }

    public function sair()
    {
        unset($_SESSION['id'],$_SESSION['usuario'],$_SESSION['email'],$_SESSION['logado']);
        return [
            'status' => 'sucesso', 
            'classe' => 'success',
            'titulo' => 'Sucesso',
            'mensagem' => 'Você saiu da sua conta.'
        ];
    }

    public function pesquisa($termo)
    {
        $resultado = [];
        $termo = "%" . $termo . "%";
        $query = $this->db->prepare("SELECT id, usuario, email FROM usuarios WHERE usuario LIKE :term OR email LIKE :termo;");
        $query->execute([':termo' => $termo]);
        while ($linha = $query->fetch()) {
            $resultado[] = $linha;
        }
        return $resultado;
    }

    public function quantidade()
    {
        $query = $this->db->prepare("SELECT COUNT(id) AS amount FROM usuarios;");
        $query->execute();
        return $query->fetch()['amount'];
    }

    public function instalar()
    {
        if (!file_exists(SQL_FILE))
            return false;

        try {
            $sql = file_get_contents(SQL_FILE);
            $this->db->exec($sql);
        } catch(\PDOException $e) {
            unset($e);
            return "Error: " . $e->getMessage();
        }

        return true;
    }
}